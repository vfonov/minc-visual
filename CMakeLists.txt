project(minc-visual)
enable_language(C)
enable_language(CXX)

cmake_minimum_required(VERSION 2.8)

SET(MINC_VISUAL_PACKAGE_VERSION_MAJOR 0)
SET(MINC_VISUAL_PACKAGE_VERSION_MINOR 9)
SET(MINC_VISUAL_PACKAGE_VERSION_PATCH 0)
SET(MINC_VISUAL_RELEASE_DATE "20140821")

SET(MINC_VISUAL_VERSION_FULL "${MINC_VISUAL_PACKAGE_VERSION_MAJOR}.${MINC_VISUAL_PACKAGE_VERSION_MINOR}.${MINC_VISUAL_PACKAGE_VERSION_PATCH}-${MINC_VISUAL_RELEASE_DATE}")

#SET(CPACK_GENERATOR DEB)
SET(CPACK_PACKAGE_NAME "minc-visual")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "minc image processing toolkit")
SET(CPACK_PACKAGE_VENDOR "Brain Imaging Center, Montreal Neurological Institute, McGill University")
SET(CPACK_PACKAGE_VERSION_MAJOR ${MINC_VISUAL_PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${MINC_VISUAL_PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${MINC_VISUAL_PACKAGE_VERSION_PATCH})
SET(CPACK_PACKAGE_CONTACT "Vladimir Fonov <vladmir.fonov@gmail.com>")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "minc-visual-${MINC_VISUAL_VERSION_FULL}")
SET(CPACK_MONOLITHIC_INSTALL ON)
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/COPYING.txt")

#IF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")
EXEC_PROGRAM(uname ARGS "-m" OUTPUT_VARIABLE CMAKE_SYSTEM_PROCESSOR)
#ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "unknown")

IF(NOT DEFINED CPACK_SYSTEM_NAME)
  SET(MT_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)

IF(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE(CMAKE_CL_64)
    SET(MT_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(CMAKE_CL_64)
ELSE(${CMAKE_SYSTEM_NAME} MATCHES Windows)
  IF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
    EXEC_PROGRAM(lsb_release ARGS "-s -i" OUTPUT_VARIABLE SYSTEM_ID)
    EXEC_PROGRAM(lsb_release ARGS "-s -r" OUTPUT_VARIABLE SYSTEM_RELEASE)
    SET(MT_SYSTEM_NAME "${SYSTEM_ID}_${SYSTEM_RELEASE}-${CMAKE_SYSTEM_PROCESSOR}")
  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Linux )
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Windows)

SET(CPACK_PACKAGE_FILE_NAME "minc-visual-${MINC_VISUAL_VERSION_FULL}-${MT_SYSTEM_NAME}")

# register local modules
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake-modules")
INCLUDE(PreventInSourceBuilds)
include(ExternalProject)
AssureOutOfSourceBuilds(minc-visual)

# default install directories
SET(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "Install path prefix, prepended onto install directories.")
SET(CPACK_SET_DESTDIR    ON)
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_STRIP_FILES ON)

# superbuild options

ENABLE_TESTING()
INCLUDE(CTest)

SET(SUPERBUILD_STAGING_PREFIX ${CMAKE_BINARY_DIR}/external)

IF(APPLE)
  LIST(APPEND MINC_TEST_ENVIRONMENT "DYLD_LIBRARY_PATH=${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}:${CMAKE_CURRENT_BINARY_DIR}/libminc:$ENV{DYLD_LIBRARY_PATH}")
ELSE(APLLE)
  LIST(APPEND MINC_TEST_ENVIRONMENT "LD_LIBRARY_PATH=${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}:${CMAKE_CURRENT_BINARY_DIR}/libminc:$ENV{DYLD_LIBRARY_PATH}")
ENDIF(APPLE)


# required packages
FIND_PACKAGE( Threads )

FIND_PACKAGE( OpenGL REQUIRED )
FIND_PACKAGE( GLUT   REQUIRED )
FIND_PACKAGE( X11    QUIET )

# minc stuff, provided by minc-toolkit
FIND_PACKAGE( LIBMINC  REQUIRED )
FIND_PACKAGE( BICPL    REQUIRED )

FIND_PACKAGE(ITK REQUIRED)

INCLUDE(${LIBMINC_USE_FILE})

#INCLUDE(BuildCoin)
INCLUDE(BuildQT)
INCLUDE(BuildVTK)
#INCLUDE(BuildQuarter)

#build_coin(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
build_qt(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
build_vtk(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})
#build_quarter(${CMAKE_INSTALL_PREFIX} ${SUPERBUILD_STAGING_PREFIX})

add_dependencies(VTK QT)
#add_dependencies(COIN QT)
#add_dependencies(QUARTER COIN)
#add_dependencies(QUARTER QT )



INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/bin
	DESTINATION .
	PATTERN *
	PERMISSIONS OWNER_EXECUTE OWNER_READ OWNER_WRITE GROUP_EXECUTE GROUP_READ WORLD_READ WORLD_EXECUTE )

INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}
	DESTINATION .)

INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/include
	DESTINATION .)

# do we really need to install share?
INSTALL(DIRECTORY ${SUPERBUILD_STAGING_PREFIX}/${CMAKE_INSTALL_PREFIX}/share
	DESTINATION .)

# setup additional variables for making Debian package
INCLUDE(DebianPackageAddons)

# setup additional variables for making RPM package
INCLUDE(RPMPackageAddons)


# according to http://www.cmake.org/pipermail/cmake/2011-November/047137.html it's better to put this in the end
INCLUDE(CPack)
